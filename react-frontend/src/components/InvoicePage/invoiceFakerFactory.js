
import { faker } from "@faker-js/faker";
export default (user,count) => {
    let data = [];
    for (let i = 0; i < count; i++) {
        const fake = {
no: faker.lorem.sentence(""),
invoicetype: faker.lorem.sentence(""),
invoicedateandtime: faker.lorem.sentence(""),
originaleInvoicereferencenumber: faker.lorem.sentence(""),
supplierSname: faker.lorem.sentence(""),
supplierStin: faker.lorem.sentence(""),
supplierSsstregistrationnumber: faker.lorem.sentence(""),
supplierSidentifiertype: faker.lorem.sentence(""),
supplieridentifiernumber: faker.lorem.sentence(""),
supplierSmsiccode: faker.lorem.sentence(""),
supplierStourismtaxregistrationnumber: faker.lorem.sentence(""),
supplierSbusinessactivitydescription: faker.lorem.sentence(""),
supplierSeMail: faker.lorem.sentence(""),
thefirstsupplierScontactnumber: faker.lorem.sentence(""),
supplierScontactnumber: faker.lorem.sentence(""),
suppliercountryname: faker.lorem.sentence(""),
supplierstatename: faker.lorem.sentence(""),
suppliercityname: faker.lorem.sentence(""),
supplierpostalzone: faker.lorem.sentence(""),
buyerSname: faker.lorem.sentence(""),
buyerStin: faker.lorem.sentence(""),
buyerSsstregistrationnumber: faker.lorem.sentence(""),
buyeridentifiertype: faker.lorem.sentence(""),
businessregistrationnumberIdentificationnumberPassportnumber: faker.lorem.sentence(""),
buyerSeMail: faker.lorem.sentence(""),
buyerSaddressCountryname: faker.lorem.sentence(""),
buyerSaddressStatename: faker.lorem.sentence(""),
buyerSaddressCityname: faker.lorem.sentence(""),
buyerSaddressPostalzone: faker.lorem.sentence(""),
thefirstbuyerScontactnumber: faker.lorem.sentence(""),
buyerScontactnumber: faker.lorem.sentence(""),
paymentinformationinvoicecurrency: faker.lorem.sentence(""),
paymentinformationcurrencyexchangerate: faker.lorem.sentence(""),
paymentinformationfrequencyofbilling: faker.lorem.sentence(""),
paymentinformationbillingperiodstartdate: faker.lorem.sentence(""),
paymentinformationbillingperiodenddate: faker.lorem.sentence(""),
paymentinformationpaymentmode: faker.lorem.sentence(""),
paymentinformationsupplierSbankaccountnumber: faker.lorem.sentence(""),
paymentinformationpaymentterms: faker.lorem.sentence(""),
paymentinformationprepaymentamount: faker.lorem.sentence(""),
paymentinformationprepaymentdate: faker.lorem.sentence(""),
paymentinformationprepaymentreferencenumber: faker.lorem.sentence(""),
shippingrecipientSname: faker.lorem.sentence(""),
shippingrecipientSaddresscountryname: faker.lorem.sentence(""),
shippingrecipientSaddressstatename: faker.lorem.sentence(""),
shippingrecipientSaddresscityname: faker.lorem.sentence(""),
shippingrecipientSaddresspostalzone: faker.lorem.sentence(""),
shippingrecipientStin: faker.lorem.sentence(""),
shippingrecipientSidentifiertype: faker.lorem.sentence(""),
shippingrecipientSinformationbusinessregistrationnumberIdentificationnumberPassportnumber: faker.lorem.sentence(""),
otherinformationbillreferencenumber: faker.lorem.sentence(""),
otherinformationreferencenumberofcustomsformno19Etc: faker.lorem.sentence(""),
otherinformationincoterms: faker.lorem.sentence(""),
otherinformationfreetradeagreementFtaInformation: faker.lorem.sentence(""),
otherinformationauthorisationnumberforcertifiedexporter: faker.lorem.sentence(""),
otherinformationreferencenumberofcustomsformno2: faker.lorem.sentence(""),
invoicelineno: faker.lorem.sentence(""),
invoicelineclassification: faker.lorem.sentence(""),
invoicelineproductname: faker.lorem.sentence(""),
invoicelinequantity: faker.lorem.sentence(""),
invoicelineunitprice: faker.lorem.sentence(""),
invoicelinemeasurement: faker.lorem.sentence(""),
invoicelinesubtotal: faker.lorem.sentence(""),
invoicelinecountryoforigin: faker.lorem.sentence(""),
invoicelinetotalexcludingtax: faker.lorem.sentence(""),
invoicelinetaxtype: faker.lorem.sentence(""),
invoicelinetaxrate: faker.lorem.sentence(""),
invoicelinetaxamount: faker.lorem.sentence(""),
invoicelinedetailsoftaxexemption: faker.lorem.sentence(""),
invoicelinetaxexemptionamountexempted: faker.lorem.sentence(""),
invoicelinediscountrate: faker.lorem.sentence(""),
discountdetailsofamount: faker.lorem.sentence(""),
invoicelinedetailsofdiscountdescription: faker.lorem.sentence(""),
invoicelinedetailsofchargefeeChargerate: faker.lorem.sentence(""),
invoicelinedetailsofchargefeeChargeamount: faker.lorem.sentence(""),
detailsoftaxtaxtype: faker.lorem.sentence(""),
detailsoftaxtotaltaxableamountpertaxtype: faker.lorem.sentence(""),
detailsoftaxtotaltaxamountpertaxtype: faker.lorem.sentence(""),
taxexemptiondetailsoftaxexemption: faker.lorem.sentence(""),
taxexemptionamountexemptedfromtax: faker.lorem.sentence(""),
discountadditionaldiscountamount: faker.lorem.sentence(""),
discountadditionaldescription: faker.lorem.sentence(""),
feeamountadditionalfeeamount: faker.lorem.sentence(""),
feeamountadditionaldescription: faker.lorem.sentence(""),
totaldiscountvalue: faker.lorem.sentence(""),
totalfeeChargeamount: faker.lorem.sentence(""),
totaltaxamount: faker.lorem.sentence(""),
totalexcludingtax: faker.lorem.sentence(""),
totalnetamount: faker.lorem.sentence(""),
totalincludingtax: faker.lorem.sentence(""),
roundingamount: faker.lorem.sentence(""),
totalpayableamount: faker.lorem.sentence(""),
invoicenumber: faker.lorem.sentence(""),
consolidated: faker.lorem.sentence(""),

updatedBy: user._id,
createdBy: user._id
        };
        data = [...data, fake];
    }
    return data;
};
